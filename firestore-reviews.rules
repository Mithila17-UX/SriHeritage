rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Existing rules for sites collection
    match /sites/{siteId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        request.auth.token.email in ["admin@sriheritage.com", "mithila17ux@gmail.com"];
    }

    // Users collection rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Reviews collection rules
    match /reviews/{reviewId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create if user is authenticated and userId matches auth.uid
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && validateReviewData(request.resource.data);
      
      // Allow update/delete only by the review author
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }

    // Site ratings collection rules  
    match /siteRatings/{siteId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow write access for authenticated users (for rating statistics updates)
      // In production, consider making this server-side only
      allow write: if request.auth != null && validateRatingStatsData(request.resource.data);
    }

    // Forum posts collection rules (if exists)
    match /forumPosts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.authorId;
    }

    // Forum comments collection rules (if exists)
    match /forumComments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null 
        && request.auth.uid == resource.data.authorId;
    }
  }
}

// Validation function for review data
function validateReviewData(data) {
  return data.keys().hasAll(['siteId', 'userId', 'userDisplayName', 'userEmail', 'rating', 'comment', 'createdAt', 'updatedAt']) &&
    data.siteId is number &&
    data.userId is string &&
    data.userDisplayName is string &&
    data.userEmail is string &&
    data.rating is number &&
    data.rating >= 1 &&
    data.rating <= 5 &&
    data.comment is string &&
    data.comment.size() >= 10 &&
    data.comment.size() <= 500 &&
    data.createdAt is timestamp &&
    data.updatedAt is timestamp;
}

// Validation function for rating statistics data
function validateRatingStatsData(data) {
  return data.keys().hasAll(['siteId', 'averageRating', 'totalReviews', 'totalRatingSum', 'lastUpdated']) &&
    data.siteId is number &&
    data.averageRating is number &&
    data.averageRating >= 0 &&
    data.averageRating <= 5 &&
    data.totalReviews is number &&
    data.totalReviews >= 0 &&
    data.totalRatingSum is number &&
    data.totalRatingSum >= 0 &&
    data.lastUpdated is timestamp;
}
